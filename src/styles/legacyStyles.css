@import "./variables.css";

/* src/components/metrics/card/SensitivitySection/style.css */
.SensitivitySection.SMALL {
  height: 70px;
  padding-left: 5px;
  padding-right: 4px;
  padding: 3px 4px 6px 5px;
  background-color: rgba(189, 189, 189, 0.14);
  flex: 0;
  position: relative;
}

.SensitivitySection.LARGE svg path.dot {
  fill: rgba(88, 173, 109, 0.12);
}
.SensitivitySection.SMALL svg path.dot {
  fill: rgba(88, 173, 109, 0.18);
}
.SensitivitySection svg .axis line {
  stroke: #ced6dc;
}
.SensitivitySection svg .axis .tick {
  fill: #ced6dc;
}
.SensitivitySection svg .axis .domain {
  fill: #e2efe9;
  stroke: none;
}

.metricCard.intermediate .SensitivitySection.LARGE svg path.dot {
  fill: rgba(90, 113, 89, 0.12);
}

.metricCard.intermediate .SensitivitySection.SMALL svg path.dot {
  fill: rgba(90, 113, 89, 0.18);
}

.SensitivitySection svg .axis text {
  font-size: 0.9em;
  fill: #7a909a;
}

.SensitivitySection svg text.axis.label {
  fill: #3c4448;
  font-size: 1em;
  font-weight: 700;
}

/* src/components/metrics/card/style.css */
.metricCard {
  max-width: 30em;
  white-space: normal;
  z-index: 0;
  position: relative;
  font-weight: 300;
  overflow: hidden;
}

.ReactModal__Overlay--after-open {
  z-index: 5;
}

.ReactModal__Overlay--after-open {
  overflow: auto;
}

/* src/components/spaces/canvas/style.css */
.canvas-space::selection {
  background-color: none;
}

/* src/components/spaces/show/style.css */
.spaceShow {
  flex: 2;
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: #dfe1e4;
}

.spaceShow.screenshot {
  background-color: #c2cdd6;
}

.canvas-space {
  flex: 1;
  max-height: 100%;
}

.canvas-space:not(.overflow-hidden) {
  overflow: auto;
}

.canvas-space.overflow-hidden {
  overflow: hidden;
}

.spaceShow > .content {
  display: flex;
  max-height: 100%;
  align-items: start;
  flex: 1;
}

/* FlowGrid.css */
.FlowGrid {
  position: relative;
  margin-left: 1em;
  margin-top: 1em;

  .canvas {
    position: relative;
    z-index: 1;
  }
}

.FlowGridRow {
  display: flex;
  align-items: stretch;
  flex-direction: row;
}

.FlowGridCell {
  display: flex;
  flex: 1;
  min-height: 60px;
}

.FlowGrid.withLines .FlowGridCell {
  border-right: 1px dashed rgba(0, 25, 95, 0.09);
  border-bottom: 1px dashed rgba(0, 25, 95, 0.09);
}

/* draggable by react-dnd */
.FlowGridCell > div {
  display: grid;
  place-items: stretch;
}

.FlowGridFilledCell {
  display: grid;
  place-items: stretch;
  width: 100%;
  padding: 3px;
  outline: none;
}

.showEdges .FlowGridFilledCell {
  padding: 8px;
}

.FlowGridEmptyCell {
  width: 100%;
  display: flex;
}

.FlowGrid.isSelectable {
  .FlowGridEmptyCell {
    cursor: pointer;
  }

  .FlowGridCell.hovered .FlowGridEmptyCell {
    background-color: rgba(79, 152, 197, 0.25);
  }

  .FlowGridCell.hovered.hasItem .FlowGridFilledCell {
    background-color: rgba(75, 138, 177, 0.3);
    border-radius: 1px;
  }
}

.FlowGridEmptyCell:focus {
  outline: none;
}

.IsOver .FlowGridEmptyCell,
.IsOver .isDragging {
  transition: background-color 0.2s ease;
  background-color: rgba(127, 149, 160, 0.81);
}

svg.edge {
  position: absolute;
  top: 0;
  z-index: 0;
}

svg.edge path.basic-arrow {
  stroke-linecap: "round";
  stroke-linejoin: "round";
  stroke-dasharray: "5,5";
  stroke-width: 3px;
}

.arrow {
  stroke-width: 0;
}

$default: #899eb6;
$unconnected: rgba(77, 121, 175, 0.06);
$unconnected-head: rgba(77, 121, 175, 0.06);
$ancestor: rgb(149, 182, 178);
$ancestor-1-degree: rgb(67, 121, 107);
$descendant: rgb(158, 172, 188);
$descendant-1-degree: rgb(86, 104, 125);
$errors: #b59893;
$screenshot: rgb(128, 154, 185);

svg.edge path.basic-arrow.unconnected {
  stroke: $unconnected;
}
.arrow.unconnected {
  fill: $unconnected-head;
}

svg.edge path.basic-arrow.default {
  stroke: $default;
}
.arrow.default {
  fill: $default;
}

.screenshot svg.edge path.basic-arrow.default {
  stroke: $screenshot;
}
.screenshot .arrow.default {
  fill: $screenshot;
}

svg.edge path.basic-arrow.hasErrors.hasErrors {
  stroke: $errors;
}
.arrow.hasErrors.hasErrors {
  fill: $errors;
}

svg.edge path.basic-arrow.ancestor {
  stroke: $ancestor;
}
.arrow.ancestor {
  fill: $ancestor;
}

svg.edge path.basic-arrow.ancestor-1-degree {
  stroke: $ancestor-1-degree;
}
.arrow.ancestor-1-degree {
  fill: $ancestor-1-degree;
}

svg.edge path.basic-arrow.descendant {
  stroke: $descendant;
}
.arrow.descendant {
  fill: $descendant;
}

svg.edge path.basic-arrow.descendant-1-degree {
  stroke: $descendant-1-degree;
}
.arrow.descendant-1-degree {
  fill: $descendant-1-degree;
}

.FlowGrid-Container {
  float: left;
}

.FlowGrid .Region {
  position: absolute;
  border-radius: 3px;
}

.FlowGrid .Region.selected {
  background: rgba(153, 186, 208, 0.87);
}

.FlowGrid .Region.fill {
  border: 1px dashed rgba(0, 0, 0, 0.4);
}

.FlowGrid .Region.copied {
  border: 2px dashed rgba(7, 115, 167, 0.75);
  background: rgba(153, 186, 208, 0.17);
}

.FlowGrid .Region.analyzed {
  background: linear-gradient(
    45deg,
    rgba(72, 187, 90, 0.66),
    rgba(120, 203, 149, 0.65)
  );
  border-radius: 0;
}

.FlowGridCell {
  position: relative;
}

.FlowGridCell .AutoFillToken--outer {
  position: absolute;
  right: -1.25em;
  bottom: -1.25em;
  z-index: 2;
  border-radius: 0.5em;
  padding: 0.9em;
  width: 2.5em;
  height: 2.5em;
  transition: padding 0.05s;
}

.FlowGridCell .AutoFillToken--outer:hover {
  padding: 0.5em;
  transition: padding 0.05s;
}

.FlowGridCell .AutoFillToken {
  cursor: crosshair;
  height: 100%;
  width: 100%;
  border-radius: 0.1em;
  background: rgb(90, 141, 177);
}
